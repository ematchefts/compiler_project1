package compiler.parser;

import compiler.scanner.Token;

public class ExpressionP {
	
	private Expression expression;
	private ExpressionPP expressionPP;
	private Args args;
	private SimpleExpressionP simpleExpressionP;
	
	public ExpressionP (Expression exp){
		expression = exp;
	}
	
	public ExpressionP (Expression exp, ExpressionPP epp) {
		expression = exp;
		expressionPP = epp;	
	}
	
	public ExpressionP (Args a, SimpleExpressionP sep) {
		args = a;
		simpleExpressionP = sep;
	}
	
	public ExpressionP (SimpleExpressionP sep){
		simpleExpressionP = sep;
	}

	public static ExpressionP parseExpressionP(Parser parser) throws ParserException {
		ExpressionP expressionP;
		Expression exp;
		Token currentToken = parser.getCurrentToken();
		
		switch(currentToken.getTokenType()){
			case ASSIGN_TOKEN:
				parser.advanceToken();
				exp = Expression.parseExpression(parser);
				expressionP = new ExpressionP (exp);
				return expressionP;
			case LEFTSQBRACKET_TOKEN:
				parser.advanceToken();
				exp = Expression.parseExpression(parser);
				parser.matchToken(Token.TokenType.RIGHTSQBRACKET_TOKEN);
				ExpressionPP epp = ExpressionPP.parseExpressionPP(parser);
		}
		return null;
	}

}
